/******************|android commands|*****************/
am start -n ｛包(package)名｝/｛包名｝.{活动(activity)名称}
am start -n com.android.browser/com.android.browser.BrowserActivity
am startservice -n ｛包(package)名｝/｛包名｝.{服务(service)名称}
am startservice -n com.android.traffic/com.android.traffic.maniservice
am broadcast -a <广播动作>
am broadcast -a android.net.conn.CONNECTIVITY_CHANGE
logcat -s Tag
logcat | grep SysCtrl > /vendor/log.txt&
setprop persist.log.tag S   //关闭所有log
setprop persist.log.tag.SysCtrlTag V    //打开自己的log, 查看所有
adb shell install -r apk

dumpsys -l | grep sysctrl   //列出java服务
dumpsys iauto.system.sysctrlmanager     //java服务的dump,调用dump函数

lshal | grep {服务名}   //列出native服务
lshal debug iauto.hardware.sysctrl@1.0::ISysCtrl/default    //native服务，调用debug函数

/******************|ubuntu 卡死解决办法|*****************/
ubuntu：
进入命令行方法：Ctrl + Alt + F1(F7就是桌面)
桌面卡死安全重启办法：
1. 同时按住 Ctrl 和 Alt 键，执行2、3步骤都一直按住不要放
2. 按顺序依次按下PrtSc键（或者SysRq 键）, R , E , I , S , U , B 键

/******************|android binder和hwbinder的相关封装代码|*****************/
android 9以及以前的代码，没有C++封装，更容易分析跟驱动的交互过程：
binder Servicemanager位置：/frameworks/native/cmds/servicemanager/
android 8才有的hwbinder
hwbinder Servicemanager位置：/system/hwservicemanager/

defaultServiceManager是用来获取ServiceManager引用的，代码运行在Clinet进程
binder 位置：frameworks/native/libs/binder/IServiceManager.cpp
hwbinder 位置： system/libhidl/transport/ServiceManagement.cpp

aidl native服务和hidl native服务的区别
aidl mgr: IServiceManager addService
hidl ngr: ServiceManagment registerAsService

/******************|android binder进程|*****************/
binder/vdnbinder: 
framework/native/libs/binder:
=>ProcessState.cpp
=>IServiceManager.cpp =>addService
hwbinder: system/libhwbinder

ServiceManager和普通进程的区别是前者会调用becomeContextManager
对于每一个android进程来说第一步就是open binder设备文件并初始化
ex: main_mediaserver.cpp
1 sp<ProcessState> proc(ProcessState::self());
1.1. open
1.2. ioctl
1.3. mmap
2 sp<IServiceManager> sm(defaultServiceManager());
    获取serviceManager 引用也就是new BpServiceManager(new BpBinder(0))
/******************|android binder 服务端进程|*****************/
3. MediaPlayerService::instantiate();
    //对于服务端添加服务， 匿名binder也是这样，
    //本质是通过驱动传递binder对象, 把对象存在内核，把handle传给对端
    defaultServiceManager()->addService(
                String16("media.player"), new MediaPlayerService());
    {生成的BpServiceManager代码，根据名字远程请求添加一个服务， android 11以前是手写的代码在IServiceManager中
        Parcel data, reply;
        data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());
        data.writeString16(name);
        data.writeStrongBinder(service);
        data.writeInt32(allowIsolated ? 1 : 0);
        data.writeInt32(dumpsysPriority);
        status_t err = remote()->transact(ADD_SERVICE_TRANSACTION, data, &reply);
    }
    //Android 10就是手写的BpServiceManager代码，以后都是生成的
    //class BpServiceManager : public BpInterface<IServiceManager>

/******************|android binder BnXXX的类封装|*****************/
class [[clang::lto_visibility_public]] IBinder : public virtual RefBase
    transact();
    linkToDeath();
    class DeathRecipient : public virtual RefBase
        public void binderDied() = 0;
    }
}
class BBinder : public IBinder;
{
    onTransact();   //接受
    linkToDeath();
}
class BpBinder : public IBinder {
    mHandle //这就是那个跨进程的引用号handle
    transact(); //发送
}
 template<typename INTERFACE>;
class BnInterface : public INTERFACE, public BBinder;
{
    virtual sp<IInterface>      queryLocalInterface(const String16& _descriptor);
    virtual const String16&     getInterfaceDescriptor() const;
}
class BnMediaPlayerService: public BnInterface<IMediaPlayerService>;
{
    //解析数据根据code调用子类实现的IMediaPlayerService接口
    onTransact();
}
class MediaPlayerService : public BnMediaPlayerService;
{
    //实现IMediaPlayerService定义跨进程的接口
}
注册服务的时候将这个MediaPlayerService对象的地址传输到驱动中，代表驱动层binder实体
当client请求的时候，就对象到这个指针了，调用其onTransact函数，然后根据code值调用子类具体函数
也可以进程内通信，transact直接调用自己onTransact

/******************|android binder BnXXX和BpXXX共通父类|*****************/
class IInterface : public virtual RefBase;
{
    RefBase是实现引用计数的
    //转化为binder
    asBinder();
}
class IMediaPlayerService: public IInterface;
{
    DECLARE_META_INTERFACE(MediaPlayerService);
    //定义纯虚跨进程通信接口
}
4. 最后看看服务端是怎么响应请求的
//binder驱动从内核返回用户空间，用户空间遇到BR_SPAWN_LOOPER，就创建通过mProcess->spawnPooledThread(false);
//异步创建新线程，并使之成为Binder线程IPCThreadState::self()->joinThreadPool(mIsMain);
//对于同一个请求线程，即使是oneWay方式请求，Service对其处理一定是按顺序的
//也就是虽然client,不等待，但是Service的对接下来的处理是串行进行的
IPCThreadState代表一个Binder线程，在没有数据的时候就陷入block
    IPCThreadState::joinThreadPool(); //循环读取binder请求
    =>getAndExecuteCommand();         //如果读取到了就根据参数处理
    =>talkWithDriver();               //首先从驱动读取请求数据
    =>executeCommand();               //开始执行请求
    =>case BR_TRANSACTION:            //处理事务(接口调用都是事务)
        reinterpret_cast<BBinder*>(tr.cookie)->transact(tr.code, buffer,
                            &reply, tr.flags);
    =>onTransact(code, data, reply, flags)  //transact调用子类onTransact(), 调用完毕;
5. 再看看返回值，如果需要返回值就把返回值写在replay里面
    =>sendReply(reply, (tr.flags & kForwardReplyFlags));
    =>{
        writeTransactionData(BC_REPLY, flags, -1, 0, reply, &statusBuffer); //数据写入mOut中
        return waitForResponse(nullptr, nullptr);   //调用talkWithDriver将mOut的数据发送到Binder驱动
    }
    最后由Binder驱动将数据“发送”到调用进程

/******************|android binder BpXXX的类封装|*****************/
class BpRefBase : public virtual RefBase
{
    RefBase是实现引用计数的
    //得到远程binder的handle封装对象
    remote()
}
template<typename INTERFACE>
class BpInterface : public INTERFACE, public BpRefBase;
{
    //构造函数，传入远程binder服务的handle封装对象
    BpInterface(const sp<IBinder>& remote);
}
class BpMediaPlayerService: public BpInterface<IMediaPlayerService>
{
    //实现IMediaPlayerService的跨进程借口，实际就是使用remote想binder传输参数
    remote()->transact(LISTEN_FOR_REMOTE_DISPLAY, data, &reply);
}

/******************|android binder 客户端进程|*****************/
1. sp<IServiceManager> sm = defaultServiceManager();    //获取SMGR
   sp<IBinder> binder = getService(String16("media.player"));   //获取远程服务(里面有handle)
   binder->linkToDeath(sDeathNotifier);                 //注册死亡代理
   //最重要的一步，就是通过IMediaPlayerService::asInterface()
   //                                       =>queryLocalInterface默认返回this
   //interface_cast<IClassName>(binder)展开后就是返回 new BpClassName(binder);
   //最后返回new BpMediaPlayerService(binder);
   const sp<IMediaPlayerService> sService = interface_cast<IMediaPlayerService>(binder);
   //
 template<typename INTERFACE>
 inline sp<INTERFACE> interface_cast(const sp<IBinder>& obj)
 {
    return INTERFACE::asInterface(obj);
 }
 //asInterface是使用宏DECLARE_META_INTERFACE声明和使用宏IMPLEMENT_META_INTERFACE定义
 //这两个宏在IXXX中引入成静态函数
2. 也就是说BpXXX是对从SMGR获取的远程服务remote的一个包裹类，将客户端的请求都转送到远程服务remote
3. 看看remote是个什么玩意
    3.1 先看defaultServiceManager();
             using AidlServiceManager = android::os::IServiceManager;
           =>sm = interface_cast<AidlServiceManager>(ProcessState::self()->getContextObject(nullptr));
           =>sm = new BpServiceManager(ProcessState::self()->getContextObject(nullptr));
           =>ProcessState::self()->getContextObject(nullptr)
           =>sp<IBinder> context = getStrongProxyForHandle(handle); //handle = 0代表SMGR
           =>sp<BpBinder> b = BpBinder::create(handle); //实际就是new BpBinder(0)
        所以defaultServiceManager()就是个new BpServiceManager(new BpBinder(0)), 
        new BpBinder(0)就是BpServiceManager的remote
    3.2 再看sm->getService返回什么
        //Android 10就是BpServiceManager代码
        //class BpServiceManager : public BpInterface<IServiceManager>
        getService()
        {   //生成的代码，根据名字远程请求一个handle存在Parcel中
            Parcel data, reply;
            data.writeInterfaceToken(IServiceManager::getInterfaceDescriptor());
            data.writeString16(name);
            remote()->transact(CHECK_SERVICE_TRANSACTION, data, &reply);
            return reply.readStrongBinder();
        }
            =>readNullableStrongBinder()
            =>unflattenBinder()
            =<sp<IBinder> binder = ProcessState::self()->getStrongProxyForHandle(flat->handle);
        所以最终还是使用远程获取的handle调用getStrongProxyForHandle得到new BpBinder(handle)

//最后看看remote()->transact()干了什么
1. 明确remote()是一个BpBinder(handle)
2. Bpinder::transact()
   =>IPCThreadState::self()->transact(binderHandle(), code, data, reply, flags);
   //根据歇息写入把请求信息数据写入Parcel，放在变量mOut中
   =>writeTransactionData(BC_TRANSACTION, flags, handle, code, data, nullptr);
   =>waitForResponse();
   =>talkWithDriver();
   =>bwr.write_buffer = (uintptr_t)mOut.data();
   =>ioctl(mProcess->mDriverFD, BINDER_WRITE_READ, &bwr);
   可知最终就是包装目标和数据丢给binder驱动
   Binder驱动把找到对端，生成本端的handle放到mOut
   最终BpServiceManager拿着这个handle生成一个BBBinder对象最为BpXXX的remote()

/******************|android binder进程/线程相关类封装|*****************/
对Binder的IO操作C++封装:
ProcessState: 代表binder进程
IPCThreadState: 代表bidner线程

ProcessState::self()
  =>open_driver(open binder/ioctl/mmap)
IPCThreadState::self()
  =>ProcessState::self()

IPCThreadState::joinThreadPool()    //将线程成为处理bidner请求的专用线程
    =>线程开始循环读取binder驱动的数据，如果读取到就返回用户空间执行，否则block

ProcessState::startThreadPool()     //开启子线程，然后在子线程中重复上一步
    =>开启子线程，并在子线程执行IPCThreadState::joinThreadPool()让其变为binder线程

/******************|android 匿名binder|*****************/
匿名binder：不用注册到SMGR的binder，在已经建立的binder通道获取其进程的Binder对象服务(未注册)
看看通过BnMediaPlayerService怎么获取BnMediaPlayer服务
1. BnMediaPlayerService的onTransact函数
{
    case CREATE: {
        CHECK_INTERFACE(IMediaPlayerService, data, reply);
        sp<IMediaPlayerClient> client =
            interface_cast<IMediaPlayerClient>(data.readStrongBinder());
        audio_session_t audioSessionId = (audio_session_t) data.readInt32();
        AttributionSourceState attributionSource;
        status_t status = data.readParcelable(&attributionSource);
        if (status != NO_ERROR) {
            return status;
        }
        sp<IMediaPlayer> player = create(client, audioSessionId, attributionSource);
        reply->writeStrongBinder(IInterface::asBinder(player));
        return NO_ERROR;
    } break;
}
2. IInterface::asBinder函数
class IInterface
{
    static sp<IBinder>  asBinder(const IInterface*);
    static sp<IBinder>  asBinder(const sp<IInterface>&);
    virtual IBinder*            onAsBinder() = 0;
    //对于BnXXX返回This, 对于BpXXX返回remote()(remote本身是包裹handle的BpBinder)
    reply->writeStrongBinder(IInterface::asBinder(player));
    return sp<IBinder>::fromExisting(const_cast<IInterface*>(iface)->onAsBinder());
}
3. 获取的代码最关键的一行：reply->writeStrongBinder(BnMediaPlayer*);
   然后会在IPCThreadState中的excuteCommand中讲reply数据通过talkToDriver传递到Binder驱动
   最后跟向SMGR注册驱动一样，
   Binder驱动会内核中为本进程创建BinderNode(包含Binder对象)，为对端进程创建BinderRef(包含handle)
   并建立映射handle到BinderNode的映射关系(通过红黑树实现)


Java
//IXX的父接口IInterface，只有一个接口asBinder
public interface IInterface
{
    public IBinder asBinder();
}
//AIDL生成的IXXX, 果然继承IInterface
//同时生成一个内部类Stub, 继承IXXX和android.os.Binder
public interface IXXX extends android.os.IInterface {
    public static abstract class Stub extends android.os.Binder implements IXXX {
        private static class Proxy implements IXXX {
            private android.os.IBinder mRemote;
            Proxy(android.os.IBinder remote) {
                mRemote = remote;
            }
            public android.os.IBinder asBinder() {
                return mRemote;
            }            
        }
        public static IXXX asInterface(android.os.IBinder obj) {
            if ((obj == null)) {
                return null;
            }
            //检查传过来的binder是否和现在的进程是同一进程，如果是，返回值不为null
            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
            if (((iin != null) && (iin instanceof IXXX))) {
                return ((IXXX) iin);
            }
            //不是同一进程，返回stub的poxy
            return new IXXX.Stub.Proxy(obj);//Proxy包裹BinderProxy(持有handle)
        }
    }
}
//Stud类似于native层的BnXXX
//Proxy类似于native层BpXXX
//IBinder类似于native层的IBinder
public interface IBinder {
    transact();
}
//Binder类似于native层的BBinder
public class Binder implements IBinder {
    onTransact();
}
//BinderProxy类似于native的BpBinder
public final class BinderProxy implements IBinder {

}

//ServiceManagerNative就是Aidl的Stub类似于native层BnServiceManager
public abstract class ServiceManagerNative extends Binder implements IServiceManager
{
    调用子类onTransact实现具体功能
}
//ServiceManagerProxy就是aidl生成的Proxy类似于native层BpServiceManager
class ServiceManagerProxy implements IServiceManager {
    //利用BinderProxy做事情
}
//看看getService过程
public final class ServiceManager{
    //静态方法
    getService/addService
}
先看怎么获取java层SMGR
=>rawGetService(name)
=>getIServiceManager().getService(name)
=>sServiceManager = ServiceManagerNative.asInterface(Binder.allowBlocking(BinderInternal.getContextObject()));
//猜测一下肯定创建一个BinderProxy对象
//BinderInternal.getContextObject()是一个native接口
=>android_os_BinderInternal_getContextObject()
=>sp<IBinder> b = ProcessState::self()->getContextObject(NULL) //这就是一个BpBinder(0), 也就是Native的SMGR
=>javaObjectForBinder();
{
    //创建BinderProxyNativeData对象
    BinderProxyNativeData* nativeData = new BinderProxyNativeData();
    nativeData->mOrgue = new DeathRecipientList;
    //把native的SMGR赋给其mObject
    nativeData->mObject = val;
    //在native创建创建一个java BinderProxy对象，构造参数为native的BinderProxyNativeData
    jobject object = env->CallStaticObjectMethod(gBinderProxyOffsets.mClass,
             gBinderProxyOffsets.mGetInstance, (jlong) nativeData, (jlong) val.get()/*BpBinder(0)*/);
}
//jni调回java层的BinderProxy的getInstance()函数
//这个静态函数给每个native的binder对应一个BinderProxy对象
//ref: https://www.cnblogs.com/blogs-of-lxl/p/10088548.html
//Q&A: https://www.jianshu.com/p/adaa1a39a274 
private static BinderProxy getInstance(long nativeData, long iBinder) {
    BinderProxy result;
    synchronized (sProxyMap) {
        result = sProxyMap.get(iBinder);
        if (result != null) {
            return result;
        }
        result = new BinderProxy(nativeData);   //关键点使用BinderProxyNativeData构造BinderProxy
        sProxyMap.set(iBinder, result);
    }
    return result;
}
//然后用BinderProxy作为参数调用asInterface
=>ServiceManagerNative.asInterface(BinderProxy(BpBinder(0)));
=>return new ServiceManagerProxy(obj)
=>相当于： ServiceManagerProxy(BinderProxy(BpBinder(0)));
//BpServiceManager的remote是BpBinder
//ServiceManagerProxy的remote是BinderProxy
但最终BinderProxy又通过jni委托给了BpBinder
getService委托过程
   =>transact()
   =>transactNative()
   =>android_os_BinderProxy_transact();
   {    //取回BpBinder对象
        IBinder* target = getBPNativeData(env, obj)->mObject.get();
        //通过native的BpBinder进行远程调用
        target->transact(code, *data, reply, flags)
   }
   最后返回IBinder binder = reply.readStrongBinder();
   =>nativeReadStrongBinder()
   实际上就是BinderProxy(BpBinder(handle))
   最后再asInterface创建Prox(BinderProxy)

2. 再看下怎么getService, 跟获取Java层SMGR一样，Java层对象Proxy通过BinderProxy包裹Native的BpBinder
3. 最后看看addService, 先猜一下，应该是Native层的BnXXX对象包裹Java层的Stub对象
   =>ServiceManagerProxy.addService()
   =>writeStrongBinder(IBinder val)
   =>nativeWriteStrongBinder(mNativePtr, val)
   =>android_os_Parcel_writeStrongBinder(val)
   =>parcel->writeStrongBinder(ibinderForJavaObject(env, val));
   //从Binder的mObject得到JavaBinderHolder，那么JavaBinderHolder哪儿创建的呢？
   //答案是这句代码mObject = getNativeBBinderHolder();在Java的Binder构造中调用得到
   //android_os_Binder_getNativeBBinderHolder=>return new JavaBBinderHolder();
   =>JavaBBinderHolder* jbh = (JavaBBinderHolder*)
              env->GetLongField(obj, gBinderOffsets.mObject);   //得到JavaBBinderHolder
   =>return jbh->get(env, obj); //然后返回其get, 猜测这里肯定是创建了BBinder对象
   //class JavaBBinder : public BBinder
   =>b = new JavaBBinder(env, obj);
   //果然是这样，将Java的binder作为参数，创建对象存在其mObject，最后将JavaBBinder传给驱动
   //回调通过反射调用Java的Binder的onTransact
   =>env->CallBooleanMethod(mObject, gBinderOffsets.mExecTransact,
              code, reinterpret_cast<jlong>(&data), reinterpret_cast<jlong>(reply), flags);

总结：对于java层来说，客户端的java对象Proxy持有native的BpBinder(handle)
                    服务端的java对象Stub被native的BpXXX持有

/******************|android 虚拟机编译优化|*****************/
4. Android App优化
    a. Android 2.2 使用JIT(缓存热点代码-内存级别)
    b. Android 4.4 引入ART(使用AOT编译，即在安装时就解释成机器代码)
       AOT(Ahead of time)编译的缺点是安装时间长，而且机器码会更大
    b. Android 5.0 完全替代Dalvik
    c. Android 7.0 为了平衡，使用JIT+AOT+Profile方式
       AOT(All of the time)
       JIT的时候会把热点代码信息写入Profile文件
       空闲的时候，根据Profile文件编译并持久化(APK+Profile)
    d. Android 9.0 引入cloud profile，也就是把用户的Profile上传到Google Play
       用户下载的时候就可以提前有一个Profile来做AOT了
    e. 2022 I/O 引入 Baseline profile，可以提前使用工具自动生成Profile(把自动生成的工作提取到开发阶段了)

/******************|android 进程|*****************/
android分为 原生进程和java进程
原生进程就是C/C++进程
java进程就是原生虚拟机程序+java代码

/******************|android 虚拟机原理|*****************/
Android虚拟机原理
AndroidRuntime作为入口
1. 加载libart.so
2. 根据symbol导出libart.so中的函数指针
    *JNI_GetDefaultJavaVMInitArgs
    *JNI_CreateJavaVM
    *JNI_GetCreatedJavaVMs
3. 在安装的时候PMS请求守护进程installd
   将dex优化为odex(run_dexopt)或者转化为oat(run_dex2oat)机器码

/******************|android 启动Zygote进程过程|*****************/
android启动Zygote进程
1. init进程解析init.rc配置文件，/system/bin/app_process -Xzygote /system/bin --zygote --start-system-server
2. app_process native进程的main函数启动ART虚拟机，调用ART的start方法
3. ART虚拟找到Java类的main函数然后执行，进入Java层执行，Java进程Zygote启动起来了
4. 创建Socket服务接受AMS的创建新进程的请求
5. 创建SystemServer进程(AMS，WMS, PMS等都在里面， 一个进程可以有多个binder实例/服务)

/******************|android Zygote启动App进程过程|*****************/
Zygote启动App进程
1. App startActivity => AMS
2. AMS检查如果需要新建进程就是发送Socket请求到Zygote
3. Zygote通过jni 调用native层fork出新进程
4. 在新进程close socket(继承父进程的)
5. 新进程中调用native 将自己变为binder进程-创建
	virtual void onZygoteInit()
  	{
       sp<ProcessState> proc = ProcessState::self();
       ALOGV("App process: starting thread pool.\n");
       proc->startThreadPool();
    }
6. 新进程找到类的main函数然后调用，也就是ActiviityThread的main函数
7. 新进程虎仔attach方法向AMS注册自己，接下来就可以和AMS双向通信了

/******************|Linux 文件描述符和fork的注意点|*****************/
1. 文件描述符分为进程表(指向文件表项)，文件表(文件偏移信息)，node表(代表物理文件)
2. open会新建进程表项和文件表项
3. dup会复制进程表项，指向之前的文件表项
4. fork之后会复制fd, 指向之前的文件表项，类似于dup
5. close只会剪断自我进程内的进程表项到文件表项的链接
6. 通过进程间通信传递fd应该是不可行(除非fork)，待验证

/******************|android Java层四大组件的binder通信|*****************/
Activity/Service:
    1. 创建Activity/Service使用Content的方法startXXX向AMS发送远程请求
    2. 发送请求的时候附带一个Binder对象(ApplicationThread)给AMS调用本端方法实现双向通信
    3. 想想也知道ApplicationThread里面实现了Activity和Service的生命周期回调了

Service独有的：
    1. binderService(ServiceConnection)请求绑定service, 传入一个连接回调对象
       =>想想看这个回调对象ServiceConnection被肯定被包裹在一个Binder对象里面
       =>验证 private static class InnerConnection extends IServiceConnection.Stub
       =>{  //ServiceDispatcher对象包含了ServiceConnection
            //ServiceDispatcher对象也包含了InnerConnection
            //InnerConnection又包含了ServiceDispatcher
            //所以Binder对象InnerConnection间接包含了ServiceConnection
            static final class ServiceDispatcher {
                private final ServiceDispatcher.InnerConnection mIServiceConnection;
                private final ServiceConnection mConnection;
        }
    2. obBinder返回Binder对象
    2. private void handleBindService()调用Service的onBinder
        ActivityManager.getService().publishService(binder);   //将binder对象发布到AMS