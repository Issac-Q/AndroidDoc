linux misc设备驱动
    1.首先misc都是字符设备

binder驱动为misc驱动，资料参考地址：http://gityuan.com/2015/11/01/binder-driver/


struct list_head 
{
    struct list_head *prev;
    struct list_head *next;
}

#define offsetof(type, member) (size_t)&(((type*)0)->member)


#define container_of(ptr, type, member) ({ \
     const typeof( ((type *)0)->member ) *__mptr = (ptr); \     //防止输入的参数类型不匹配编译报错
     (type *)( (char *)__mptr - offsetof(type,member) );})    


创建一个list_head结构体prev和next都指向自己的空链表
#define LIST_HEAD_INIT(name) { &name, &name }
#define LIST_HEAD(name) struct list_head name = LIST_HEAD_INIT(name)
相当于：
struct list_head name = { &name, &name}
判空： node->next == node

#define INIT_LIST_HEAD(ptr) do {\
        (ptr)->prev = ptr;  \
        (ptr)->next = ptr;  \
    } while(0)

------------------------------------------添加------------------------------------------添加
static inline void __list_add(struct list_head *new,
                  struct list_head *prev,
                  struct list_head *next)
{
    next->prev = new;
    new->next = next;
    new->prev = prev;
    prev->next = new;
}

//添加到头后面一个
static inline void list_add(struct list_head *new, struct list_head *head)
{
    __list_add(new, head, head->next);
}

//添加到尾后面一个
static inline void list_add_tail(struct list_head *new, struct list_head *head)
{
    __list_add(new, head->prev, head);
}
------------------------------------------添加------------------------------------------添加


------------------------------------------删除------------------------------------------删除
static inline void __list_del(struct list_head * prev, struct list_head * next)
{
    next->prev = prev;
    prev->next = next;
}

static inline void list_del(struct list_head *entry)
{
    __list_del(entry->prev, entry->next);
    entry->next = LIST_POISON1;
    entry->prev = LIST_POISON2;    
}

static inline void __list_del_entry(struct list_head *entry)
{
    __list_del(entry->prev, entry->next);
}

static inline void list_del_init(struct list_head *entry)
{
    __list_del_entry(entry);
    INIT_LIST_HEAD(entry);
}
------------------------------------------删除------------------------------------------删除

------------------------------------------替换------------------------------------------替换
static inline void list_replace(struct list_head *old,
                struct list_head *new)
{
    new->next = old->next;
    new->next->prev = new;
    new->prev = old->prev;
    new->prev->next = new;
}
------------------------------------------替换------------------------------------------替换


------------------------------------------判空------------------------------------------判空
static inline int list_empty(const struct list_head *head)
{
    return head->next == head;
}
------------------------------------------判空------------------------------------------判空


//获取节点
#define list_entry(ptr, type, member) \
    container_of(ptr, type, member)


//遍历list
#define list_for_each(pos, head) \
    for (pos = (head)->next; pos != (head); pos = pos->next)
//当需要删除时使用这个版本
#define list_for_each_safe(pos, n, head) \
    for (pos = (head)->next, n = pos->next; pos != (head); \
        pos = n, n = pos->next)    